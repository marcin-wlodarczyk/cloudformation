AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.

  ECSClusterStackTemplateURL:
    Description: URL of the nested stack template
    Type: String

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud.

Resources:
  ECSClusterStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Ref ECSClusterStackTemplateURL
      Parameters:
        VpcId: !Ref VpcId
        Subnets: !Join [',', !Ref Subnets]
      TimeoutInMinutes: 5
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: node-api-cnt
          Image: mwlodarczyk/node-api
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          EnvironmentFiles: []
      Family: udemy-nginxdemo-td
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 0.5 vCPU
      Memory: 1 GB
      ExecutionRoleArn: 'arn:aws:iam::904330416988:role/ecsTaskExecutionRole'
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
  ECSService:
    DependsOn: ALBListener
    Type: AWS::ECS::Service
    Properties:
      Cluster: !GetAtt ECSClusterStack.Outputs.ECSCluster
      CapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Base: 0
          Weight: 1
      TaskDefinition: !Ref ECSTaskDefinition # other example
      # ServiceName: dummy-api-service
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: node-api-cnt
          ContainerPort: 80
          LoadBalancerName: !Ref AWS::NoValue
          TargetGroupArn: !Ref ALBTargetGroup
      HealthCheckGracePeriodSeconds: 20
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt TaskSecurityGroup.GroupId
          Subnets: !Ref Subnets
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all HTTP connections
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VpcId
      HealthCheckPath: /
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets: !Ref Subnets
      Scheme: internet-facing
      IpAddressType: ipv4
      Type: application